local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Mining Simulator Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

-- Get the player's name dynamically
local playerName = LocalPlayer.Name

-- Miner Tab
local MinerTab = Window:MakeTab({
    Name = "Miner",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Function to Purchase Miners
local function purchaseMiners(quantity)
    if quantity < 1 then
        print("Invalid quantity! Cannot buy less than 1 miner.")
        return
    end

    local success, errorMessage = pcall(function()
        local args = { [1] = quantity }
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("supersocial_flux@0.0.2"):WaitForChild("flux"):WaitForChild("Services"):WaitForChild("TycoonService"):WaitForChild("RF"):WaitForChild("PurchaseNodes"):InvokeServer(unpack(args))
    end)

    if success then
        print("Successfully bought " .. quantity .. " Miner(s)!")
    else
        print("Failed to buy Miner(s)! Error: " .. errorMessage)
    end
end

-- Buy 1 Miner Button
MinerTab:AddButton({
    Name = "Buy 1 Miner",
    Callback = function()
        purchaseMiners(1) -- Buy 1 Miner
    end    
})

-- Buy 5 Miners Button
MinerTab:AddButton({
    Name = "Buy 5 Miners",
    Callback = function()
        purchaseMiners(5) -- Buy 5 Miners
    end    
})

-- Auto Farm Tab
local AutoFarmTab = Window:MakeTab({
    Name = "Auto Farm",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Local variables for toggle states AutoFarm
local autoMergeEnabled = false
local autoProspectEnabled = false
local autoOpenForgeEnabled = false
local autoSellEnabled = false

-- Function to show notification
local function showNotification(title, content)
    OrionLib:MakeNotification({
        Name = title,
        Content = content,
        Image = "rbxassetid://4483345998",
        Time = 5
    })
end

-- Auto Merge Miners Toggle
AutoFarmTab:AddToggle({
    Name = "Auto Merge Miners",
    Default = false,
    Callback = function(Value)
        autoMergeEnabled = Value -- Update local variable
        if Value then
            showNotification("Auto Farm Loaded", "Auto Merge Miners Enabled")
            print("Auto Merge Miners Enabled")
            while autoMergeEnabled do
                wait(0.5) -- Adjust the wait time as needed
                local success, errorMessage = pcall(function()
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("supersocial_flux@0.0.2"):WaitForChild("flux"):WaitForChild("Services"):WaitForChild("TycoonService"):WaitForChild("RF"):WaitForChild("RequestMerge"):InvokeServer()
                end)
                if not success then
                    print("Auto Merge Miners failed! Error: " .. errorMessage)
                end
            end
        else
            showNotification("Auto Farm Loaded", "Auto Merge Miners Disabled")
            print("Auto Merge Miners Disabled")
        end
    end    
})

-- Auto Prospect Ore Toggle
AutoFarmTab:AddToggle({
    Name = "Auto Prospect Ore",
    Default = false,
    Callback = function(Value)
        autoProspectEnabled = Value -- Update local variable
        if Value then
            showNotification("Auto Farm Loaded", "Auto Prospect Ore Enabled")
            print("Auto Prospect Ore Enabled")
            while autoProspectEnabled do
                wait(0.1) -- Adjust the wait time as needed
                local success, errorMessage = pcall(function()
                    workspace:WaitForChild(playerName .. "'s Tycoon"):WaitForChild("Tycoon"):WaitForChild("Machines"):WaitForChild("Prospector"):WaitForChild("ButtonPodium"):WaitForChild("ButtonEvent"):FireServer()
                end)
                if not success then
                    print("Auto Prospect Ore failed! Error: " .. errorMessage)
                end
            end
        else
            showNotification("Auto Farm Loaded", "Auto Prospect Ore Disabled")
            print("Auto Prospect Ore Disabled")
        end
    end    
})

-- Auto Open Forge Door Toggle
AutoFarmTab:AddToggle({
    Name = "Auto Open Forge Door",
    Default = false,
    Callback = function(Value)
        autoOpenForgeEnabled = Value -- Update local variable
        if Value then
            showNotification("Auto Farm Loaded", "Auto Open Forge Door Enabled")
            print("Auto Open Forge Door Enabled")
            while autoOpenForgeEnabled do
                wait(0.5) -- Adjust the wait time as needed
                local success, errorMessage = pcall(function()
                    workspace:WaitForChild(playerName .. "'s Tycoon"):WaitForChild("Tycoon"):WaitForChild("Machines"):WaitForChild("Forge"):WaitForChild("ButtonPodium"):WaitForChild("ButtonEvent"):FireServer()
                end)
                if not success then
                    print("Auto Open Forge Door failed! Error: " .. errorMessage)
                end
            end
        else
            showNotification("Auto Farm Loaded", "Auto Open Forge Door Disabled")
            print("Auto Open Forge Door Disabled")
        end
    end    
})

-- Auto Sell Toggle
AutoFarmTab:AddToggle({
    Name = "Auto Sell",
    Default = false,
    Callback = function(Value)
        autoSellEnabled = Value -- Update local variable
        if Value then
            showNotification("Auto Farm Loaded", "Auto Sell Enabled")
            print("Auto Sell Enabled")
            while autoSellEnabled do
                wait(0.5) -- Adjust the wait time as needed
                local success, errorMessage = pcall(function()
                    workspace:WaitForChild(playerName .. "'s Tycoon"):WaitForChild("Tycoon"):WaitForChild("Machines"):WaitForChild("Seller"):WaitForChild("ButtonPodium"):WaitForChild("ButtonEvent"):FireServer()
                end)
                if not success then
                    print("Auto Sell failed! Error: " .. errorMessage)
                end
            end
        else
            showNotification("Auto Farm Loaded", "Auto Sell Disabled")
            print("Auto Sell Disabled")
        end
    end    
})

-- Spin Tab
local SpinTab = Window:MakeTab({
    Name = "Spin",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Upgrade Tab
local UpgradeTab = Window:MakeTab({
    Name = "Upgrade",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Function to purchase an upgrade
local function purchaseUpgrade(upgradeName)
    local args = { [1] = upgradeName }

    -- Accessing the TycoonService for upgrade purchases
    local purchaseUpgradeEvent = game:GetService("ReplicatedStorage")
        :WaitForChild("Packages")
        :WaitForChild("_Index")
        :WaitForChild("supersocial_flux@0.0.2")
        :WaitForChild("flux")
        :WaitForChild("Services")
        :WaitForChild("TycoonService")
        :WaitForChild("RF")
        :WaitForChild("PurchaseUpgrade")

    -- Invoking the server event to purchase the upgrade
    local success, err = pcall(function()
        purchaseUpgradeEvent:InvokeServer(unpack(args))
    end)

    -- Provide feedback based on success or error
    if success then
        UpgradeTab:AddLabel({
            Name = upgradeName .. " upgraded successfully!",
            TextColor = Color3.new(0, 1, 0)  -- Green for success
        })
    else
        UpgradeTab:AddLabel({
            Name = "Failed to upgrade " .. upgradeName .. ": " .. err,
            TextColor = Color3.new(1, 0, 0)  -- Red for error
        })
    end
end

-- Define upgrades and their display names
local upgrades = {
    { "ProspectorCapacity", "Upgrade Prospector Capacity" },
    { "ProspectorSpeed", "Upgrade Prospector Speed" },
    { "ProspectorStackSize", "Upgrade Prospector Stack Size" },
    { "DoorOpenTime", "Upgrade Door Open Time" },
    { "SellerLoadSpeed", "Upgrade Seller Load Speed" },
}

-- Adding buttons for each upgrade
for _, upgrade in ipairs(upgrades) do
    local upgradeName, displayName = upgrade[1], upgrade[2]

    UpgradeTab:AddButton({
        Name = displayName,
        Callback = function()
            purchaseUpgrade(upgradeName)
        end    
    })
end

-- Optional UI elements
UpgradeTab:AddLabel({
    Name = "Choose an upgrade to enhance your gameplay!",
})

-- Example of additional functionality: Upgrade Status Tracker
local upgradeStatus = {}

local function updateUpgradeStatus()
    for _, upgrade in ipairs(upgrades) do
        local upgradeName = upgrade[1]
        upgradeStatus[upgradeName] = "Available"  -- Placeholder; you can update this based on your game logic
    end
end

-- Call this function to initialize or refresh the upgrade status
updateUpgradeStatus()

-- Example of displaying upgrade status
for _, upgrade in ipairs(upgrades) do
    local upgradeName = upgrade[1]
    UpgradeTab:AddLabel({
        Name = upgradeName .. ": " .. upgradeStatus[upgradeName],
        TextColor = Color3.new(1, 1, 0)  -- Yellow for status
    })
end

OrionLib:Init()
