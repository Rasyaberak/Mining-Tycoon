local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Mining Simulator Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

-- Get the player's name dynamically
local playerName = LocalPlayer.Name

-- Miner Tab
local MinerTab = Window:MakeTab({
    Name = "Miner",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Function to Purchase Miners
local function purchaseMiners(quantity)
    if quantity < 1 then
        print("Invalid quantity! Cannot buy less than 1 miner.")
        return
    end

    local success, errorMessage = pcall(function()
        local args = { [1] = quantity }
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("supersocial_flux@0.0.2"):WaitForChild("flux"):WaitForChild("Services"):WaitForChild("TycoonService"):WaitForChild("RF"):WaitForChild("PurchaseNodes"):InvokeServer(unpack(args))
    end)

    if success then
        print("Successfully bought " .. quantity .. " Miner(s)!")
    else
        print("Failed to buy Miner(s)! Error: " .. errorMessage)
    end
end

-- Buy 1 Miner Button
MinerTab:AddButton({
    Name = "Buy 1 Miner",
    Callback = function()
        purchaseMiners(1) -- Buy 1 Miner
    end    
})

-- Buy 5 Miners Button
MinerTab:AddButton({
    Name = "Buy 5 Miners",
    Callback = function()
        purchaseMiners(5) -- Buy 5 Miners
    end    
})

-- Auto Farm Tab
local AutoFarmTab = Window:MakeTab({
    Name = "Auto Farm",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Local variables for toggle states AutoFarm
local autoMergeEnabled = false
local autoProspectEnabled = false
local autoOpenForgeEnabled = false
local autoSellEnabled = false

-- Function to show notification
local function showNotification(title, content)
    OrionLib:MakeNotification({
        Name = title,
        Content = content,
        Image = "rbxassetid://4483345998",
        Time = 5
    })
end

-- Auto Merge Miners Toggle
AutoFarmTab:AddToggle({
    Name = "Auto Merge Miners",
    Default = false,
    Callback = function(Value)
        autoMergeEnabled = Value -- Update local variable
        if Value then
            showNotification("Auto Farm Loaded", "Auto Merge Miners Enabled")
            print("Auto Merge Miners Enabled")
            while autoMergeEnabled do
                wait(1) -- Adjust the wait time as needed
                local success, errorMessage = pcall(function()
                    game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("supersocial_flux@0.0.2"):WaitForChild("flux"):WaitForChild("Services"):WaitForChild("TycoonService"):WaitForChild("RF"):WaitForChild("RequestMerge"):InvokeServer()
                end)
                if not success then
                    print("Auto Merge Miners failed! Error: " .. errorMessage)
                end
            end
        else
            showNotification("Auto Farm Loaded", "Auto Merge Miners Disabled")
            print("Auto Merge Miners Disabled")
        end
    end    
})

-- Auto Prospect Ore Toggle
AutoFarmTab:AddToggle({
    Name = "Auto Prospect Ore",
    Default = false,
    Callback = function(Value)
        autoProspectEnabled = Value -- Update local variable
        if Value then
            showNotification("Auto Farm Loaded", "Auto Prospect Ore Enabled")
            print("Auto Prospect Ore Enabled")
            while autoProspectEnabled do
                wait(1) -- Adjust the wait time as needed
                local success, errorMessage = pcall(function()
                    workspace:WaitForChild(playerName .. "'s Tycoon"):WaitForChild("Tycoon"):WaitForChild("Machines"):WaitForChild("Prospector"):WaitForChild("ButtonPodium"):WaitForChild("ButtonEvent"):FireServer()
                end)
                if not success then
                    print("Auto Prospect Ore failed! Error: " .. errorMessage)
                end
            end
        else
            showNotification("Auto Farm Loaded", "Auto Prospect Ore Disabled")
            print("Auto Prospect Ore Disabled")
        end
    end    
})

-- Auto Open Forge Door Toggle
AutoFarmTab:AddToggle({
    Name = "Auto Open Forge Door",
    Default = false,
    Callback = function(Value)
        autoOpenForgeEnabled = Value -- Update local variable
        if Value then
            showNotification("Auto Farm Loaded", "Auto Open Forge Door Enabled")
            print("Auto Open Forge Door Enabled")
            while autoOpenForgeEnabled do
                wait(1) -- Adjust the wait time as needed
                local success, errorMessage = pcall(function()
                    workspace:WaitForChild(playerName .. "'s Tycoon"):WaitForChild("Tycoon"):WaitForChild("Machines"):WaitForChild("Forge"):WaitForChild("ButtonPodium"):WaitForChild("ButtonEvent"):FireServer()
                end)
                if not success then
                    print("Auto Open Forge Door failed! Error: " .. errorMessage)
                end
            end
        else
            showNotification("Auto Farm Loaded", "Auto Open Forge Door Disabled")
            print("Auto Open Forge Door Disabled")
        end
    end    
})

-- Auto Sell Toggle
AutoFarmTab:AddToggle({
    Name = "Auto Sell",
    Default = false,
    Callback = function(Value)
        autoSellEnabled = Value -- Update local variable
        if Value then
            showNotification("Auto Farm Loaded", "Auto Sell Enabled")
            print("Auto Sell Enabled")
            while autoSellEnabled do
                wait(6) -- Adjust the wait time as needed
                local success, errorMessage = pcall(function()
                    workspace:WaitForChild(playerName .. "'s Tycoon"):WaitForChild("Tycoon"):WaitForChild("Machines"):WaitForChild("Seller"):WaitForChild("ButtonPodium"):WaitForChild("ButtonEvent"):FireServer()
                end)
                if not success then
                    print("Auto Sell failed! Error: " .. errorMessage)
                end
            end
        else
            showNotification("Auto Farm Loaded", "Auto Sell Disabled")
            print("Auto Sell Disabled")
        end
    end    
})

-- Other Tab
local OtherTab = Window:MakeTab({
    Name = "Other",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Local variables for toggle states Other
local AntiLagEnabled = false
local AntiDCEnabled = false

local function ToggleSmoothAntiLag(enabled)
    if enabled then
        game.Lighting.GlobalShadows = false
        game.Lighting.Brightness = 2

        for _, v in pairs(game.Workspace:GetDescendants()) do
            if v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v.Enabled = false
            elseif v:IsA("PointLight") or v:IsA("SpotLight") or v:IsA("SurfaceLight") then
                v.Enabled = false
            elseif v:IsA("MeshPart") then
                v.RenderFidelity = Enum.RenderFidelity.Performance
            end
        end

        settings().Rendering.QualityLevel = Enum.QualityLevel.Level02
        print("Smooth Anti-Lag Activated")
    else
        game.Lighting.GlobalShadows = true
        game.Lighting.Brightness = 1

        for _, v in pairs(game.Workspace:GetDescendants()) do
            if v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v.Enabled = true
            elseif v:IsA("PointLight") or v:IsA("SpotLight") or v:IsA("SurfaceLight") then
                v.Enabled = true
            elseif v:IsA("MeshPart") then
                v.RenderFidelity = Enum.RenderFidelity.Automatic
            end
        end

        settings().Rendering.QualityLevel = Enum.QualityLevel.Automatic
        print("Smooth Anti-Lag Deactivated")
    end
end

OtherTab:AddToggle({
    Name = "Anti Lag",
    Default = false,
    Callback = function(Value)
        AntiLagEnabled = Value
        ToggleSmoothAntiLag(AntiLagEnabled)
    end
})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local idleInterval = 600 -- Set to 10 minutes (600 seconds)

-- Function to prevent idle disconnect
local function PreventDC()
    if AntiDCEnabled then
        -- Reset idle timer by simulating mouse movement or keyboard input
        local virtualUser = game:GetService("VirtualUser")
        virtualUser:CaptureController()
        virtualUser:ClickButton2(Vector2.new()) -- Simulate a right-click to reset the timer

        -- Optional: Slightly move the character if you want more activity simulation
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local humanoidRootPart = player.Character.HumanoidRootPart
            humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, 0.1) -- Small movement
        end
    end
end

-- Toggle for Anti-Disconnect
OtherTab:AddToggle({
    Name = "Anti-Disconnect",
    Default = false,
    Callback = function(Value)
        AntiDCEnabled = Value
        if AntiDCEnabled then
            showNotification("Other Loaded", "Anti-Disconnect Enabled")
            
            -- Start Anti-Disconnect loop using a delay
            spawn(function()
                while AntiDCEnabled do
                    PreventDC()
                    wait(idleInterval) -- Wait for the specified interval (10 minutes) before simulating activity again
                end
            end)
        else
            showNotification("Other Loaded", "Anti-Disconnect Disabled")
        end
    end
})

OrionLib:Init()
